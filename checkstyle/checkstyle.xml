<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html -->

<module name="Checker">


<!--    <module name="RegexpSingleline">-->
<!--        &lt;!&ndash; Requires a Google copyright notice in each file.-->
<!--          Code intended to be open-sourced may have a multi-line copyright-->
<!--          notice, so that this required text appears on the second line:-->
<!--          <pre>-->
<!--            /*-->
<!--             * Copyright 2008 Google Inc.-->
<!--             *-->
<!--             * (details of open-source license...)-->
<!--          </pre>-->
<!--        &ndash;&gt;-->
<!--        <property name="format"-->
<!--                  value="^(//| \*) Copyright (\([cC]\) )?[\d]{4}(\-[\d]{4})? (Google Inc\.).*$" />-->
<!--        <property name="minimum" value="1" />-->
<!--        <property name="maximum" value="10" />-->
<!--        <property name="message" value="Google copyright is missing or malformed." />-->
<!--        <property name="severity" value="error" />-->
<!--    </module>-->

<!--    <module name="FileTabCharacter">-->
<!--        &lt;!&ndash; Checks that there are no tab characters in the file.-->
<!--        &ndash;&gt;-->
<!--    </module>-->

<!--    <module name="NewlineAtEndOfFile"/>-->

<!--    <module name="RegexpSingleline">-->
<!--        &lt;!&ndash; Checks that FIXME is not used in comments.  TODO is preferred.-->
<!--        &ndash;&gt;-->
<!--        <property name="format" value="((//.*)|(\*.*))FIXME" />-->
<!--        <property name="message" value='TODO is preferred to FIXME.  e.g. "TODO(johndoe): Refactor when v2 is released."' />-->
<!--    </module>-->

<!--    <module name="RegexpSingleline">-->
<!--        &lt;!&ndash; Checks that TODOs are named.  (Actually, just that they are followed-->
<!--             by an open paren.)-->
<!--        &ndash;&gt;-->
<!--        <property name="format" value="((//.*)|(\*.*))TODO[^(]" />-->
<!--        <property name="message" value='All TODOs should be named.  e.g. "TODO(johndoe): Refactor when v2 is released."' />-->
<!--    </module>-->

<!--    &lt;!&ndash; All Java AST specific tests live under TreeWalker module. &ndash;&gt;-->
<!--    <module name="TreeWalker">-->

<!--        &lt;!&ndash;-->

<!--        IMPORT CHECKS-->

<!--        &ndash;&gt;-->

<!--        <module name="RedundantImport">-->
<!--            &lt;!&ndash; Checks for redundant import statements. &ndash;&gt;-->
<!--            <property name="severity" value="error"/>-->
<!--        </module>-->

<!--        <module name="ImportOrder">-->
<!--            &lt;!&ndash; Checks for out of order import statements. &ndash;&gt;-->

<!--            <property name="severity" value="warning"/>-->
<!--            <property name="groups" value="com.google,android,junit,net,org,java,javax"/>-->
<!--            &lt;!&ndash; This ensures that static imports go first. &ndash;&gt;-->
<!--            <property name="option" value="top"/>-->
<!--            <property name="tokens" value="STATIC_IMPORT, IMPORT"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->

<!--        JAVADOC CHECKS-->

<!--        &ndash;&gt;-->

<!--        &lt;!&ndash; Checks for Javadoc comments.                     &ndash;&gt;-->
<!--        &lt;!&ndash; See http://checkstyle.sf.net/config_javadoc.html &ndash;&gt;-->
<!--        <module name="JavadocMethod">-->
<!--            <property name="scope" value="protected"/>-->
<!--            <property name="severity" value="warning"/>-->
<!--            <property name="allowMissingJavadoc" value="true"/>-->
<!--            <property name="allowMissingParamTags" value="true"/>-->
<!--            <property name="allowMissingReturnTag" value="true"/>-->
<!--            <property name="allowMissingThrowsTags" value="true"/>-->
<!--            <property name="allowThrowsTagsForSubclasses" value="true"/>-->
<!--            <property name="allowUndeclaredRTE" value="true"/>-->
<!--        </module>-->

<!--        <module name="JavadocType">-->
<!--            <property name="scope" value="protected"/>-->
<!--            <property name="severity" value="error"/>-->
<!--        </module>-->

<!--        <module name="JavadocStyle">-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->

<!--        NAMING CHECKS-->

<!--        &ndash;&gt;-->

<!--        &lt;!&ndash; Item 38 - Adhere to generally accepted naming conventions &ndash;&gt;-->

<!--        <module name="PackageName">-->
<!--            &lt;!&ndash; Validates identifiers for package names against the-->
<!--              supplied expression. &ndash;&gt;-->
<!--            &lt;!&ndash; Here the default checkstyle rule restricts package name parts to-->
<!--              seven characters, this is not in line with common practice at Google.-->
<!--            &ndash;&gt;-->
<!--            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]{1,})*$"/>-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--        <module name="TypeNameCheck">-->
<!--            &lt;!&ndash; Validates static, final fields against the-->
<!--            expression "^[A-Z][a-zA-Z0-9]*$". &ndash;&gt;-->
<!--            <metadata name="altname" value="TypeName"/>-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--        <module name="ConstantNameCheck">-->
<!--            &lt;!&ndash; Validates non-private, static, final fields against the supplied-->
<!--            public/package final fields "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". &ndash;&gt;-->
<!--            <metadata name="altname" value="ConstantName"/>-->
<!--            <property name="applyToPublic" value="true"/>-->
<!--            <property name="applyToProtected" value="true"/>-->
<!--            <property name="applyToPackage" value="true"/>-->
<!--            <property name="applyToPrivate" value="false"/>-->
<!--            <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$"/>-->
<!--            <message key="name.invalidPattern"-->
<!--                     value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--        <module name="StaticVariableNameCheck">-->
<!--            &lt;!&ndash; Validates static, non-final fields against the supplied-->
<!--            expression "^[a-z][a-zA-Z0-9]*_?$". &ndash;&gt;-->
<!--            <metadata name="altname" value="StaticVariableName"/>-->
<!--            <property name="applyToPublic" value="true"/>-->
<!--            <property name="applyToProtected" value="true"/>-->
<!--            <property name="applyToPackage" value="true"/>-->
<!--            <property name="applyToPrivate" value="true"/>-->
<!--            <property name="format" value="^[a-z][a-zA-Z0-9]*_?$"/>-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--        <module name="MemberNameCheck">-->
<!--            &lt;!&ndash; Validates non-static members against the supplied expression. &ndash;&gt;-->
<!--            <metadata name="altname" value="MemberName"/>-->
<!--            <property name="applyToPublic" value="true"/>-->
<!--            <property name="applyToProtected" value="true"/>-->
<!--            <property name="applyToPackage" value="true"/>-->
<!--            <property name="applyToPrivate" value="true"/>-->
<!--            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--        <module name="MethodNameCheck">-->
<!--            &lt;!&ndash; Validates identifiers for method names. &ndash;&gt;-->
<!--            <metadata name="altname" value="MethodName"/>-->
<!--            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--        <module name="ParameterName">-->
<!--            &lt;!&ndash; Validates identifiers for method parameters against the-->
<!--              expression "^[a-z][a-zA-Z0-9]*$". &ndash;&gt;-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--        <module name="LocalFinalVariableName">-->
<!--            &lt;!&ndash; Validates identifiers for local final variables against the-->
<!--              expression "^[a-z][a-zA-Z0-9]*$". &ndash;&gt;-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--        <module name="LocalVariableName">-->
<!--            &lt;!&ndash; Validates identifiers for local variables against the-->
<!--              expression "^[a-z][a-zA-Z0-9]*$". &ndash;&gt;-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->


<!--        &lt;!&ndash;-->

<!--        LENGTH and CODING CHECKS-->

<!--        &ndash;&gt;-->

<!--        <module name="LineLength">-->
<!--            &lt;!&ndash; Checks if a line is too long. &ndash;&gt;-->
<!--            <property name="max" value="${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.max}" default="100"/>-->
<!--            <property name="severity" value="error"/>-->

<!--            &lt;!&ndash;-->
<!--              The default ignore pattern exempts the following elements:-->
<!--                - import statements-->
<!--                - long URLs inside comments-->
<!--            &ndash;&gt;-->

<!--            <property name="ignorePattern"-->
<!--                      value="${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.ignorePattern}"-->
<!--                      default="^(package .*;\s*)|(import .*;\s*)|( *\* *https?://.*)$"/>-->
<!--        </module>-->

<!--        <module name="LeftCurly">-->
<!--            &lt;!&ndash; Checks for placement of the left curly brace ('{'). &ndash;&gt;-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--        <module name="RightCurly">-->
<!--            &lt;!&ndash; Checks right curlies on CATCH, ELSE, and TRY blocks are on-->
<!--            the same line. e.g., the following example is fine:-->
<!--            <pre>-->
<!--              if {-->
<!--                ...-->
<!--              } else-->
<!--            </pre>-->
<!--            &ndash;&gt;-->
<!--            &lt;!&ndash; This next example is not fine:-->
<!--            <pre>-->
<!--              if {-->
<!--                ...-->
<!--              }-->
<!--              else-->
<!--            </pre>-->
<!--            &ndash;&gt;-->
<!--            <property name="option" value="same"/>-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--        &lt;!&ndash; Checks for braces around if and else blocks &ndash;&gt;-->
<!--        <module name="NeedBraces">-->
<!--            <property name="severity" value="warning"/>-->
<!--            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>-->
<!--        </module>-->

<!--        <module name="UpperEll">-->
<!--            &lt;!&ndash; Checks that long constants are defined with an upper ell.&ndash;&gt;-->
<!--            <property name="severity" value="error"/>-->
<!--        </module>-->

<!--        <module name="FallThrough">-->
<!--            &lt;!&ndash; Warn about falling through to the next case statement.  Similar to-->
<!--            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment-->
<!--            on the last non-blank line preceding the fallen-into case contains 'fall through' (or-->
<!--            some other variants which we don't publicized to promote consistency).-->
<!--            &ndash;&gt;-->
<!--            <property name="reliefPattern"-->
<!--                      value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>-->
<!--            <property name="severity" value="error"/>-->
<!--        </module>-->


<!--        &lt;!&ndash;-->

<!--        MODIFIERS CHECKS-->

<!--        &ndash;&gt;-->

<!--        <module name="ModifierOrder">-->
<!--            &lt;!&ndash; Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and-->
<!--                 8.4.3.  The prescribed order is:-->
<!--                 public, protected, private, abstract, static, final, transient, volatile,-->
<!--                 synchronized, native, strictfp-->
<!--              &ndash;&gt;-->
<!--        </module>-->


<!--        &lt;!&ndash;-->

<!--        WHITESPACE CHECKS-->

<!--        &ndash;&gt;-->

<!--        <module name="WhitespaceAround">-->
<!--            &lt;!&ndash; Checks that various tokens are surrounded by whitespace.-->
<!--                 This includes most binary operators and keywords followed-->
<!--                 by regular or curly braces.-->
<!--            &ndash;&gt;-->
<!--            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR,-->
<!--        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,-->
<!--        EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,-->
<!--        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,-->
<!--        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,-->
<!--        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,-->
<!--        SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN"/>-->
<!--            <property name="severity" value="error"/>-->
<!--        </module>-->

<!--        <module name="WhitespaceAfter">-->
<!--            &lt;!&ndash; Checks that commas, semicolons and typecasts are followed by-->
<!--                 whitespace.-->
<!--            &ndash;&gt;-->
<!--            <property name="tokens" value="COMMA, SEMI, TYPECAST"/>-->
<!--        </module>-->

<!--        <module name="NoWhitespaceAfter">-->
<!--            &lt;!&ndash; Checks that there is no whitespace after various unary operators.-->
<!--                 Linebreaks are allowed.-->
<!--            &ndash;&gt;-->
<!--            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,-->
<!--        UNARY_PLUS"/>-->
<!--            <property name="allowLineBreaks" value="true"/>-->
<!--            <property name="severity" value="error"/>-->
<!--        </module>-->

<!--        <module name="NoWhitespaceBefore">-->
<!--            &lt;!&ndash; Checks that there is no whitespace before various unary operators.-->
<!--                 Linebreaks are allowed.-->
<!--            &ndash;&gt;-->
<!--            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC"/>-->
<!--            <property name="allowLineBreaks" value="true"/>-->
<!--            <property name="severity" value="error"/>-->
<!--        </module>-->

<!--        <module name="ParenPad">-->
<!--            &lt;!&ndash; Checks that there is no whitespace before close parens or after-->
<!--                 open parens.-->
<!--            &ndash;&gt;-->
<!--            <property name="severity" value="warning"/>-->
<!--        </module>-->

<!--    </module>-->
</module>